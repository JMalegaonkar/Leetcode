class Solution:
    def validTree(self, n: int, edges: List[List[int]]) -> bool:
        if len(edges) != n - 1: return False
        
        #create adjacency list
        adj_list = [[] for _ in range(n)]
        for x, y in edges:
            adj_list[x].append(y)
            adj_list[y].append(x)
        
        visit = set()
        
        def dfs(node, parent):
            #check if we have already visit this node
            if node in visit:
                return 
            visit.add(node)
            #go through adj list
            for ne in adj_list[node]:
                if ne == parent:
                    continue
                #if the node has already been visited then there is a cycle
                if ne in visit:
                    return False
                res = dfs(ne, node)
                if not res:
                    return False
            return True
        return dfs(0, -1) and len(visit) == n
        
